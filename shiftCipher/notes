Shift Cipher is simple type of encrption and which is easy to understand.

The Shift Cipher is also called the "Caesar Cipher", because Julius Caesar
liked to use it for his personal correspondence.

Shift Cipher takes the text of the a message and shifts all the letters to to the left or right.
For example, if a message was shifted by two, then A would become C, B would become D, C would become E, and so on.

The most popular shift cipher is ROT13 ("ROT" = "rotates"). It shifts letters 13 positions.
 It is popular because 13 is half of the 26 letter alphabet, which gives it a unique property.
 The same function can be used to both encrypt and decrypt.

 PHP has a built in functio for ROT13 called str_rot13().


Substitution Cipher

A shift cipher is actually a primitive version of a Substitution Alphabet Cipher.
A substitution cipher uses a translation map for characters.
Each character in the text gets translated into another character. 
The substitution could be into letters, or into numbers or symbols. 
Decryption simply requires applying the translation in reverse. 
Decrypting substitution ciphers are popular puzzles to include in newspapers and magazines.
In PHP, the function strtr() (short for "string translate") allows mapping one set of characters to another set.

Referances:
 https://guides.codepath.com/websecurity/Simple-Ciphers




Brute forcing is a heuristic technique that means, essentially, you're going to try to analyze every possible scenario by taking advantage of how much faster a computer is than a human brain.
For example, you're not trying to deductively figure out the password or the next best move in a Chess game; you just test every possible situation and use the right one (or the best one according to some metric, depending on what the brute force algorithm is meant to accomplish).

Your code simply goes through all the possible values that could be held for a password and checks to see whether it has found it or not.
If it doesn't, it moves on to the next possible combination until it does.

It's also a demonstration of a worst-case scenario, since the password, being defined as ZZZZZ, will be the last thing the algorithm attempts as a solution (assuming the maximum password length is defined as five characters.)

Also, as far as you being worried that people think you're using this algorithm for malicious purposes, I wouldn't be too concerned. 
Hardly any computer systems would actually be vulnerable to this kind of attack, and you would be locked out long before you ever actually happened upon a password.

import java.util.Scanner;

public class BruteForce {



    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int i, j, l, k = 97, key = 0, flag = 0, index = 0, keyVal;
        String pt;
        char[] ct1 = new char[10];
        char[] pt1 = new char[10];
        char temp;
        System.out.println("ENTER PLAIN TEXT");
        pt = sc.next();
        System.out.println("ENTER KEY VALUE :");
        key = sc.nextInt();
        for (i = 0; i < pt.length(); i++) {
            for (j = 0; j < 26; j++) {

                if (pt.charAt(i) == ' ') {
                    flag = 0;
                    break;
                }
                temp = (char) (j + k);
                if (pt.charAt(i) == temp) {
                    flag = 1;
                    index = j;
                    break;
                }
            }
            if (flag == 1) {

                char c = (char) (((index + key) % 26) + 97);
                ct1[i] = c;

            }
        }
        System.out.println("ENCRYPTED DATA:");
        for (i = 0; i < pt.length(); i++) {
            System.out.print(ct1[i]);
        }
        System.out.println("\n" + "DECRYPTION OF DATA USING BRUTE-FORCE ATTACK :");
        key = 1;
        while (key <= 26) {
            for (i = 0; i < pt.length(); i++) {
                for (j = 0; j < 26; j++) {
                    if (ct1[i] == ' ') {
                        flag = 0;
                        break;
                    }
                    temp = (char) (j + k);
                    if (ct1[i] == temp) {
                        flag = 1;
                        index = j;
                        break;
                    }
                }
                keyVal = index - key;
                if (flag == 1 & keyVal > 0) {
                    pt1[i] = (char) ((keyVal % 26) + 97);

                } else if (flag == 1) {
                    pt1[i] = (char) ((26 + keyVal) + 97);
                }

            }
            System.out.print("\n" + "DECRYPTED DATA:");
            for (i = 0; i < pt.length(); i++) {
                System.out.print(pt1[i]);
            }
            key++;
        }
    }
}

Referances:
1. https://programsinengineering.blogspot.com/2016/10/apply-brute-force-attack-on-additive.html
2. https://stackoverflow.com/questions/14094864/explain-brute-force-algorithm